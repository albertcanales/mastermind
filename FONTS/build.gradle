plugins {
    id("java-library") // or id("application")
    id("application")
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.intellij:forms_rt:7.0.3'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.+'
    implementation 'com.opencsv:opencsv:5.7.1'
}

application {
    mainClass = "presentation.Main"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('jarRelease', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    destinationDirectory = layout.buildDirectory.dir('release')
    manifest {
        attributes 'Main-Class': 'presentation.Main'
    }
    archiveClassifier = "all"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveFileName = "Mastermind.jar"
    with jar
}


tasks.register('jarLib', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "testlibs.jar"
    destinationDirectory = layout.buildDirectory.dir('tests/lib')
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

def testClasses = ["BotMakerTests", "DificultatTests", "FiveGuessTests",
                   "PartidaTests", "TaulellTest", "UserTests", "PartidaDriver", "DominiDriver"]

testClasses.each { name ->
    tasks.register("jar${name}", Jar) {
        dependsOn jarLib
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveFileName = "${name}.jar"
        destinationDirectory = layout.buildDirectory.dir("tests/${name}")
        manifest {
            attributes 'Main-Class': "domain.${name}",
                    'Class-Path': '../lib/testlibs.jar'
        }
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from sourceSets.test.output
        with jar
    }
}

tasks.register('jarTests') {
    testClasses.each { name ->
        dependsOn "jar${name}"
    }
}

jar {
    dependsOn jarTests, jarRelease
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
    //noinspection GrUnresolvedAccess
    options.author = true
}
