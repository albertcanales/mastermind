package presentation;

import javax.swing.*;
import java.awt.*;

/**
 * Representació de les boles del joc en forma de botó en la interfície de Swing
 * @author Albert Canales Ros
 */
class BolaButton extends Subject {

    /**
     * Botó de la interfície
     */
    private JButton button;

    /**
     * Identificador de la bola
     */
    private String id;

    /**
     * Color del qual es pinta el botó
     */
    private BolaColor bolaColor;

    /**
     * Panell contenidor del botó
     */
    private JPanel panel;

    /**
     * Constructor per defecte, no assigna cap color a la bola
     */
    BolaButton() {
        $$$setupUI$$$();
        setBolaColor(BolaColor.NONE);
    }

    /**
     * Setter de l'identificador de la bola
     */
    void setID(String id) {
        this.id = id;
    }

    /**
     * Getter del color de la bola
     */
    BolaColor getBolaColor() {
        return bolaColor;
    }

    /**
     * Setter del color de la bola
     */
    void setBolaColor(BolaColor bolaColor) {
        this.bolaColor = bolaColor;
        if (bolaColor.getColor() != null)
            button.setIcon(new ColorIcon(16, bolaColor.getColor()));
        else
            button.setIcon(null);
    }

    /**
     * Setter de l'estat (activat o desactivat) de la bola
     */
    void setEnabled(Boolean enabled) {
        button.setEnabled(enabled);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new FlowLayout(FlowLayout.CENTER, 1, 1));
        button = new JButton();
        button.setActionCommand("");
        button.setLabel("");
        button.setPreferredSize(new Dimension(25, 25));
        button.setText("");
        panel.add(button);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    /**
     * Classe per pintar un cercle com a icona d'un component de Swing
     * @author Albert Canales Ros
     */
    private static class ColorIcon implements Icon {

        private final int size;
        private final Color color;

        public ColorIcon(int size, Color color) {
            this.size = size;
            this.color = color;
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setColor(color);
            g2d.fillOval(x, y, size, size);
        }

        @Override
        public int getIconWidth() {
            return size;
        }

        @Override
        public int getIconHeight() {
            return size;
        }
    }
}

/**
 * Enum per encapsular els colors amb els quals es pinten de les boles del joc
 * El valor NUL (null) es fa servir quan no s'ha de pintar cap color.
 * @author Albert Canales Ros
 */
enum BolaColor {

    NONE(null, 0),
    RED(Color.RED, 1),
    GREEN(Color.green, 2),
    BLUE(Color.blue, 3);

    private final Color color;
    private final Integer number;

    BolaColor(Color color, Integer number) {
        this.color = color;
        this.number = number;
    }

    Color getColor() {
        return color;
    }

    private Integer getNumber() {
        return number;
    }

    /**
     * Mètode per obtenir el BolaColor a partir del seu nombre
     * @param number és el valor que representa el color de la bola
     * @return el BolaColor corresponent al nombre donat
     */
    static BolaColor findByNumber(Integer number) {
        for(BolaColor nd : values()){
            if(nd.getNumber().equals(number)){
                return nd;
            }
        }
        return null;
    }
}