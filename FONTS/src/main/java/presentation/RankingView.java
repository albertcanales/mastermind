package presentation;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.ArrayList;

class RankingView {
    /**
     * Controlador de presentació
     */
    private final ControladorPresentacio controladorPresentacio;
    /**
     * Panell contenidor
     */
    private JPanel panel;
    /**
     * Botó per tornar a la pantalla d'inici o home, segons si un usuari ha iniciat sessió
     */
    private JButton buttonTorna;
    /**
     * Panell per tabular entre els diferents ranquings
     */
    private JTabbedPane tabbedPane;

    /**
     * Llista de les taules on es guarden els ranquings i que es presentaran a la View
     */
    private ArrayList<JTable> rankingTableList;

    /**
     * Numero de ranquings
     */
    private final int NUM_RANKINGS = 3;
    /**
     * Numero de files màximes que es presenten del ranquing
     */
    private final int MAX_ROWS = 20;

    /**
     * Constructor per defecte de la vista
     */
    RankingView() {
        controladorPresentacio = ControladorPresentacio.getInstance();
        $$$setupUI$$$();
        initComponents();
    }
    /**
     * Mètode per mostrar la vista
     */
    void show() {
        controladorPresentacio.setContent(panel);
        controladorPresentacio.setTitle("Rànquing");
    }
    /**
     * Mètode per inicialitzar els components de la vista
     */
    private void initComponents() {
        initRankingTableList();
        initRanking();
        initTabbedPanel();

        buttonTorna.addActionListener(actionEvent -> controladorPresentacio.showInitialOrHomeView());
    }

    /**
     * Mètode per inicialitzar la llista de les taules on es guarden els ranquings
     */
    private void initRankingTableList() {
        rankingTableList = new ArrayList<>();
        for (int i = 0; i < NUM_RANKINGS; ++i) rankingTableList.add(new JTable());
    }

    /**
     * Mètode per inicialitzar cada taula amb el corresponent ranquing
     */
    private void initRanking() {
        List<List<List<String>>> ranking = controladorPresentacio.getRanquings(MAX_ROWS);

        for (int i = 0; i < NUM_RANKINGS; ++i) fillRanking(i, ranking.get(i));
    }

    /**
     * Mètode per inicialitzar els panells tabulats amb les taules que contenen els ranquings
     */
    private void initTabbedPanel() {
        tabbedPane.addTab("Fàcil", new JScrollPane(rankingTableList.get(0)));
        tabbedPane.addTab("Mig", new JScrollPane(rankingTableList.get(1)));
        tabbedPane.addTab("Difícil", new JScrollPane(rankingTableList.get(2)));
    }

    /**
     * Mètode que inicialitza amb un rànquing una taula de la llista de taules, afegint-hi la columna de posició i canviant el format del temps
     * @param index índex de la taula a inicialitzar dins la llista de taules
     * @param ranking Llista amb les partides ordenades que representa el rànquing
     */
    private void fillRanking(int index, List<List<String>> ranking) {

        String[] columnNames = {"#", "Username", "Intents", "Temps"};

        int rankingSize = ranking.size();
        String[][] rankingArray = new String[rankingSize][]; //La taula només reb arrays com paràmetres
        for (int i = 0; i < rankingSize; ++i) {
            List<String> partidaWithPosition = new ArrayList<>(ranking.get(i));
            partidaWithPosition.set(2, formatTempsJugat(Long.parseLong(partidaWithPosition.get(2)))); //Es canvia el format del temps
            int position = i + 1;
            partidaWithPosition.add(0, Integer.toString(position));

            rankingArray[i] = partidaWithPosition.toArray(new String[0]);
        }

        JTable rankingTable = new JTable(rankingArray, columnNames);
        rankingTable.setDefaultEditor(Object.class, null); //La taula no és editable

        rankingTableList.set(index, rankingTable);
    }

    /**
     * Mètode per escriure una duració de temps mesurada en mil·lisegons en un string amb el format HH:MM:SS
     * @param millis duració de temps mesurada en mil·lisegons
     * @return la duració de temps en un string amb el format HH:MM:SS
     */
    private String formatTempsJugat(Long millis) {
        return String.format("%d:%02d:%02d", millis / 3600000L, (millis / 1000 % 3600) / 60, (millis / 1000 % 60));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel.add(panel1, BorderLayout.NORTH);
        buttonTorna = new JButton();
        buttonTorna.setText("Torna");
        panel1.add(buttonTorna);
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 10, 0, 10), -1, -1));
        panel.add(panel2, BorderLayout.CENTER);
        tabbedPane = new JTabbedPane();
        panel2.add(tabbedPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
