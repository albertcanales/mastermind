package presentation;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;

public class TimerLabel extends Subject {

    static Long PERIOD_MILLIS = 1000L;
    private JPanel panel;
    private JLabel label;

    private Long time;

    private Timer timer;

    TimerLabel() {
        $$$setupUI$$$();
        initComponents();
    }

    private void initComponents() {
        timer = new Timer();
        time = 0L;
    }

    void start() {
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                time += PERIOD_MILLIS;
                label.setText(getTimeString());
                Notify();
            }
        }, 0, PERIOD_MILLIS);
    }

    void stop() {
        timer.cancel();
    }

    String getTimeString() {
        String seconds = String.valueOf((int) (time / 1000 % 60));
        if (seconds.length() == 1)
            seconds = "0" + seconds;
        String minutes = String.valueOf((int) (time / 1000 / 60));
        return minutes + ":" + seconds;
    }

    void setTime(Long time) {
        this.time = time;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new BorderLayout(0, 0));
        label = new JLabel();
        Font labelFont = this.$$$getFont$$$(null, -1, 18, label.getFont());
        if (labelFont != null) label.setFont(labelFont);
        label.setText("0:00");
        panel.add(label, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
